
#include <iostream>

#include <april/aprillibrary.h>
#include <april/logic/world.h>

using namespace std;
using namespace april;

enum	Constants		{
	WORLD_ENERGY = 10000
};

int main ()
{
	if ( initAprilLibrary() == false )
	{
		cerr << "Error! Failed to initialise april library!\n";
		return 1;
	}
	
	World * w = new World( "world-name", WORLD_ENERGY );
	cout << "World has been created!\n";
	
	//! [ins1]
	w->insertId( 1, "some-text" );
	//! [ins1]
	
	//! [get1]
	cout << "Text associated with ID 1: "
		 << w->nameForId( 1 ).toLatin1().constBegin()
		 << "\n"; // "some-text"
	//! [get1]
	
	//! [ins2]
	w->checkAddId( 1, "default-text" );
	w->checkAddId( 2, "default-text" );
	cout << "Text associated with ID 1: " 
		 << w->nameForId( 1 ).toLatin1().constBegin()
		 << "\n"; // "some-text"
	cout << "Text associated with ID 2: " 
		 << w->nameForId( 2 ).toLatin1().constBegin()
		 << "\n"; // "default-text"
	//! [ins2]
	
	//! [idValue]
	cout << "Searching '' (empty string) returns: " 
		 << w->idValue( "" )
		 << "\n"; // 0 = InvalidId
	cout << "Searching 'text' returns: "
		 << w->idValue( "text" ) 
		 << "\n"; // 0 = InvalidId
	cout << "Searching 'some-text' returns: " 
		 << w->idValue( "some-text" ) 
		 << "\n"; // 1
	cout << "Searching 'default-text' returns: "
		 << w->idValue( "default-text" )
		 << "\n"; // 2
	//! [idValue]
	
	//! [inscond]
	cout << "'some-text' at ID: " 
		 <<  w->checkAddId( "some-text" )
		  << "\n";
	cout << "'different-text' at ID: " 
		 <<  w->checkAddId( "different-text" )
		  << "\n";
	//! [inscond]
	
	//! [addNewId]
	cout << "ID autogenerated and no associated string: " 
		 <<  w->addNewId()
		 << "\n";
	cout << "ID autogenerated and associated string: " 
		 <<  w->addNewId( "associated string" )
		 << "\n";
	//! [addNewId]
	
	DEC_REF(w,w);
	AprilLibrary::remWorld( w );
	cout << "World has been destroyed!\n";
	
	endAprilLibrary();
	
	return 0;
}


