/* ========================================================================= */
/* ------------------------------------------------------------------------- */
/*!
  \file			wqstauto.cc
  \date			Apr 2013
  \author		TNick

  \brief		Contains the implementation of WqsTAuto class


*//*


 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Please read COPYING and README files in root folder
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
/* ------------------------------------------------------------------------- */
/* ========================================================================= */
//
//
//
//
/*  INCLUDES    ------------------------------------------------------------ */

#include	"wqstauto.h"


/*  INCLUDES    ============================================================ */
//
//
//
//
/*  DEFINITIONS    --------------------------------------------------------- */

using namespace april;
using namespace april::Gui;

/*  DEFINITIONS    ========================================================= */
//
//
//
//
/*  DATA    ---------------------------------------------------------------- */

/*  DATA    ================================================================ */
//
//
//
//
/*  CLASS    --------------------------------------------------------------- */

/* ------------------------------------------------------------------------- */
WqsTAuto::WqsTAuto	( QObject * parent )
	: WorldQScene( parent ),
	update_counter_( 16 ),
	update_len_( 16 ),
	frequency_( 1000 / 33 ),
	timer_id_( 0 )
{
	APRDBG_CDTOR;
	/* stub */
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
WqsTAuto::~WqsTAuto	( void )
{
	APRDBG_CDTOR;
	/* stub */
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
bool		WqsTAuto::changeInterval		( int new_val )
{
	if ( new_val <= 0 || new_val > 10000 )
	{
		return false;
	}
	
	update_len_ = new_val;
	return true;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
bool		WqsTAuto::changeFrequency		( int new_val )
{
	bool b_start = false;
	if ( new_val <= 0 || new_val > 10000 )
	{
		return false;
	}
	if ( isRunning() )
	{
		killTimer( timer_id_ );
		b_start = true;
	}
	frequency_ = new_val;
	update_counter_ = 0; // so that we generate an event right away
	if ( b_start )
	{
		timer_id_ = startTimer( frequency_ );
	}
	return true;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
bool			WqsTAuto::start			( void )
{
	bool b;
	if ( isRunning() )
		return true;
	
	timer_id_ = startTimer( frequency_ );
	if ( timer_id_ == 0 )
		return false;
	
	update_counter_ = 0; // so that we generate an event right away
	b = world()->start();
	if ( b == false )
	{
		killTimer( timer_id_ );
		timer_id_ = 0;
	}
	return b;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
bool			WqsTAuto::stop			( void )
{
	if ( !isRunning() )
		return true;
	killTimer( timer_id_ );
	timer_id_ = 0;
	world()->stop();
	return true;
}
/* ========================================================================= */

/* ------------------------------------------------------------------------- */
void			WqsTAuto::timerEvent	( QTimerEvent * )
{
	/* advance the world one step */
	world()->advance();
	//advance();
	update_counter_--;
	if ( update_counter_ <= 0 )
	{
		update_counter_ = update_len_;
		//emit worldTick();
	}
}
/* ========================================================================= */


/*  CLASS    =============================================================== */
//
//
//
//
/* ------------------------------------------------------------------------- */
/* ========================================================================= */
