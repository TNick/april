namespace   april    {

/**

\page	e_1_7   Example 7 - Creating an actor

New actors may be created from scratch, using energy from the world,
or may be created from existing actors, using a aprt of their energy.

For the first method to work we have to set-up factories as in the
\ref e_1_6 "previous example". We ammend the ActorFactory to create
a more interesting actor. This is the new constructor:
\snippet e-1-7/e-1-7.cc addcomps

We're initialising the DNA our factory holds arround with a kind (IdKind),
a running cost (1), an average life span (100) and the energy required at
birth (10). As previously stated, this energy must come from the world or
from the parents. 

Once we have a valid DNA instance we add the brain, actuator, reflex 
and sensor to the DNA sequence. Any actor created by this factory will
have these components (if they can be created).

Now, after we have a valid world we can create a new actor from scratch
like so:
\snippet e-1-7/e-1-7.cc createactor
This is what happens inside:
- the world locates the ActorFactory for IdKind;
- the factory is asked to create the instance with ActorFactory::create();
- Actor::decodeDNA() is employed to iterate the components saved
in the DNA as IDs (in our case a brain, an actuator, a reflex 
and a sensor); for each component the Factory class is searched and, if
found, asked to create an object for that ID;
- the ammount of energy required by the actor is substracted from
the free (unbounded) energy of the world
- Actor::makeAlive() is called to finalise the initialisation
- custom actors are informed that they were inserted 
in a world with a call to Actor::inserted().

Do not forget to release the reference that is passed to the caller by 
World::createActor().

<br><br><hr>
<table width=100%><tr>
<td align=left> \ref e_1_6 </td>
<td align=center> \ref april-core </td>
<td align=right> \ref e_1_8 </td>
</tr></table>
*/

}   //  namespace   april

