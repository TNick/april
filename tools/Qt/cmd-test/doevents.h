/* ========================================================================= */
/* ------------------------------------------------------------------------- */
/*!
  \file			doevents.h
  \date			Feb 2013
  \author		TNick

  \brief		Contains the definition for DoEvents class


*//*


 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Please read COPYING and README files in root folder
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
/* ------------------------------------------------------------------------- */
/* ========================================================================= */
#ifndef __DOEVENTS_INC__
#define __DOEVENTS_INC__
//
//
//
//
/*  INCLUDES    ------------------------------------------------------------ */

#include    <QEventLoop>

/*  INCLUDES    ============================================================ */
//
//
//
//
/*  DEFINITIONS    --------------------------------------------------------- */

/*  DEFINITIONS    ========================================================= */
//
//
//
//
/*  CLASS    --------------------------------------------------------------- */

/**
*	@brief	Enters an event loop and terminates it after a timeout occurs
*/
class DoEvents		: public QEventLoop		{

	//
	//
	//
	//
	/*  DEFINITIONS    ----------------------------------------------------- */

	/*  DEFINITIONS    ===================================================== */
	//
	//
	//
	//
	/*  DATA    ------------------------------------------------------------ */

private:



	/*  DATA    ============================================================ */
	//
	//
	//
	//
	/*  FUNCTIONS    ------------------------------------------------------- */

public:


	/**
	*	@brief	constructor;
	*/
	DoEvents			( int time_milisec );


	/**
	*	@brief	destructor;
	*/
	virtual				~DoEvents		( void );



	/**
	*	@brief	waits specified number of miliseconds then returns
	*/
	static void			wait			( int milisec )
	{ DoEvents( milisec ).exec(); }


protected:


	/**
	*	@brief	fired when the timeout expires
	*/
	void				timerEvent				( QTimerEvent * e );




	/*  FUNCTIONS    ======================================================= */
	//
	//
	//
	//

};	/*	class DoEvents	*/

/*  CLASS    =============================================================== */
//
//
//
//


#endif // __DOEVENTS_INC__
/* ------------------------------------------------------------------------- */
/* ========================================================================= */
